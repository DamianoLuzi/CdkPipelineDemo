const synthetics = require('Synthetics');
const WebSocket = require('ws');

const syntheticsConfiguration = synthetics.getConfiguration();
syntheticsConfiguration.setConfig({
    restrictedHeaders: [],
    restrictedUrlParameters: [],
});

exports.handler = async () => {
    const url = process.env.CHAT_API_URL;
    const message = process.env.TEST_MESSAGE || 'broadcast-test';

    if (!url) {
        throw new Error('CHAT_API_URL environment variable is not defined');
    }

    console.log('Starting WebSocket Canary test for URL:', url);

    return new Promise((resolve, reject) => {
        const timeout = 10000; // 10s timeout
        const timeoutId = setTimeout(() => {
            reject(new Error('Test timeout: Did not receive expected message.'));
        }, timeout);

        const sender = new WebSocket(url);
        const receiver = new WebSocket(url);

        const cleanExit = (err) => {
            clearTimeout(timeoutId);
            try { sender.close(); } catch {}
            try { receiver.close(); } catch {}
            if (err) reject(err);
            else resolve();
        };

        receiver.on('open', () => {
            console.log('Receiver connected.');
        });

        receiver.on('message', (data) => {
            const msg = data.toString();
            console.log('Receiver got message:', msg);
            if (msg.includes(message)) {
                console.log('Broadcast successful! Canary PASSED.');
                cleanExit();
            }
        });

        receiver.on('error', (err) => {
            console.error('Receiver error:', err);
            cleanExit(err);
        });

        sender.on('open', () => {
            console.log('Sender connected.');
            sender.send(JSON.stringify({ action: 'sendmessage', message }));
            console.log('Sender sent message:', message);
        });

        sender.on('error', (err) => {
            console.error('Sender error:', err);
            cleanExit(err);
        });
    });
};
